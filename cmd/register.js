// Generated by CoffeeScript 1.10.0
(function() {
  var moment, util, validator;

  validator = require('validator');

  moment = require('moment');

  util = require('./../util');

  module.exports = function(seneca, options) {
    var cmd_register, password_generated, password_length, starter_status;
    starter_status = options.registration.starter_status;
    password_length = options.registration.password_length || 8;
    password_generated = false;
    cmd_register = function(args, respond) {
      var email, status;
      email = args.email.toLowerCase();
      status = args.status || starter_status;
      if (!validator.isEmail(email)) {
        seneca.log.warn('invalid email', email);
        return respond(null, {
          message: 'invalid email'
        });
      }
      return seneca.act('role:account,cmd:identify', {
        email: email
      }, function(error, acc) {
        var password;
        if (acc) {
          seneca.log.warn('account already registered', acc.email);
          return respond(null, {
            message: 'account already registered'
          });
        } else {
          password = args.password;
          if (!password) {
            seneca.log.debug('generating password');
            password = util.generate_password(password_length);
            password_generated = true;
          }
          return seneca.act('role:account,cmd:encrypt', {
            subject: password
          }, function(error, res) {
            var hash, new_account;
            hash = res.hash;
            new_account = seneca.make(options.zone, options.base, 'account');
            new_account.email = email;
            new_account.hash = hash;
            new_account.registered_at = moment().format();
            new_account.status = status;
            return new_account.save$(function(error, saved_account) {
              if (error) {
                seneca.log.error('new account record failed:', error.message);
                return respond(error, null);
              }
              seneca.log.debug('new account saved');
              if (password_generated) {
                saved_account.password = password;
              }
              if (status === 'confirmed') {
                return respond(null, saved_account);
              } else {
                seneca.log.debug('issuing the conf token...');
                return seneca.act('role:account,cmd:issue_token', {
                  account_id: saved_account.id,
                  aud: 'email'
                }, function(error, res) {
                  saved_account.token = res.token;
                  return respond(error, saved_account);
                });
              }
            });
          });
        }
      });
    };
    return cmd_register;
  };

}).call(this);

//# sourceMappingURL=register.js.map
