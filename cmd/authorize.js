// Generated by CoffeeScript 1.10.0
(function() {
  var async;

  async = require('async');

  module.exports = function(seneca, options) {
    var acl, cmd_authorize;
    acl = options.acl;
    cmd_authorize = function(args, respond) {
      var accountId, action, aud, resource, response, token;
      resource = args.resource;
      action = args.action;
      token = args.token;
      accountId = args.accountId || 'anonymous';
      aud = args.aud || 'web';
      response = {
        authorized: false
      };
      return async.waterfall([
        function(decodingDone) {
          if (token) {
            return seneca.act('role:account,cmd:verify', {
              token: token
            }, function(error, res) {
              var payload;
              payload = res.decoded;
              if (!payload || !payload.id || !payload.aud) {
                seneca.log.error('decoding failed');
                return respond(null, response);
              }
              return decodingDone(null, payload);
            });
          } else {
            return decodingDone(null, null);
          }
        }, function(payload, callback) {
          if (payload && payload.id && payload.aud) {
            seneca.log.debug('using decoded account id...');
            accountId = payload.id;
            aud = payload.aud;
          }
          if (accountId !== 'anonymous') {
            return seneca.act('role:account,cmd:get', {
              account_id: accountId
            }, function(error, account) {
              if (account) {
                seneca.log.debug('got user from storage');
                return callback(null, aud + ":" + account.status);
              } else {
                seneca.log.warn('failed to get user from storage');
                return callback(null, aud + ":" + accountId);
              }
            });
          } else {
            return callback(null, aud + ":" + accountId);
          }
        }
      ], function(error, status) {
        seneca.log.debug("checking access for user " + accountId + ":", status, resource, action);
        return acl.addUserRoles(accountId, [status], function(error) {
          if (error) {
            seneca.log.error('attaching role to account failed:', error.message);
            return respond(error, null);
          }
          return acl.isAllowed(accountId, resource, action, function(error, authorized) {
            if (error) {
              seneca.log.error('access check failed', error);
              return respond(error, null);
            }
            response.authorized = authorized;
            return respond(null, response);
          });
        });
      });
    };
    return cmd_authorize;
  };

}).call(this);

//# sourceMappingURL=authorize.js.map
